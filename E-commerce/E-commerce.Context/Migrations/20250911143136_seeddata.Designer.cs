// <auto-generated />
using System;
using E_commerce.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_commerce.Context.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20250911143136_seeddata")]
    partial class seeddata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_commerce.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Carts", (string)null);
                });

            modelBuilder.Entity("E_commerce.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems", (string)null);
                });

            modelBuilder.Entity("E_commerce.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Electronic devices",
                            IsDeleted = false,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Men & Women clothes",
                            IsDeleted = false,
                            Name = "Clothes"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Educational & Novels",
                            IsDeleted = false,
                            Name = "Books"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Home & Office furniture",
                            IsDeleted = false,
                            Name = "Furniture"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Kids toys",
                            IsDeleted = false,
                            Name = "Toys"
                        },
                        new
                        {
                            Id = 6,
                            Description = "All kinds of shoes",
                            IsDeleted = false,
                            Name = "Shoes"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Cosmetics & skincare",
                            IsDeleted = false,
                            Name = "Beauty"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Sports equipment",
                            IsDeleted = false,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Groceries & snacks",
                            IsDeleted = false,
                            Name = "Food"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Smartphones & accessories",
                            IsDeleted = false,
                            Name = "Mobile"
                        });
                });

            modelBuilder.Entity("E_commerce.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("orderStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("E_commerce.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems", (string)null);
                });

            modelBuilder.Entity("E_commerce.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "HP Laptop",
                            ImagePath = "Media/WhatsApp Image 2025-09-11 at 17.07.08_2bc92a76.jpg",
                            IsDeleted = false,
                            Name = "Laptop",
                            Price = 15000m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "Cotton T-Shirt",
                            ImagePath = "Media/WhatsApp Image 2025-09-11 at 17.08.15_5f93ade3.jpg",
                            IsDeleted = false,
                            Name = "T-Shirt",
                            Price = 250m,
                            Stock = 50
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Description = "Arabic Novel",
                            ImagePath = "Media/WhatsApp Image 2025-09-11 at 17.07.06_3d0a4f09.jpg",
                            IsDeleted = false,
                            Name = "Novel",
                            Price = 120m,
                            Stock = 30
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Description = "Comfort chair",
                            ImagePath = "Media/WhatsApp Image 2025-09-11 at 17.07.07_5200513d.jpg",
                            IsDeleted = false,
                            Name = "Office Chair",
                            Price = 2000m,
                            Stock = 15
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 8,
                            Description = "Adidas Football",
                            ImagePath = "Media/WhatsApp Image 2025-09-11 at 17.07.08_4fa09fe3.jpg",
                            IsDeleted = false,
                            Name = "Football",
                            Price = 300m,
                            Stock = 20
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            Description = "Nike sneakers",
                            ImagePath = "Media/WhatsApp Image 2025-09-11 at 17.07.07_9717e371.jpg",
                            IsDeleted = false,
                            Name = "Sneakers",
                            Price = 600m,
                            Stock = 40
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            Description = "Luxury perfume",
                            ImagePath = "Media/WhatsApp Image 2025-09-11 at 17.07.07_026a458c.jpg",
                            IsDeleted = false,
                            Name = "Perfume",
                            Price = 450m,
                            Stock = 25
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 10,
                            Description = "Samsung Galaxy",
                            ImagePath = "Media/WhatsApp Image 2025-09-11 at 17.07.06_f70df6dc.jpg",
                            IsDeleted = false,
                            Name = "Smartphone",
                            Price = 10000m,
                            Stock = 18
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            Description = "Remote car",
                            ImagePath = "Media/WhatsApp Image 2025-09-11 at 17.07.06_933c83ad.jpg",
                            IsDeleted = false,
                            Name = "Toy Car",
                            Price = 150m,
                            Stock = 35
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 9,
                            Description = "Italian Pizza",
                            ImagePath = "Media/WhatsApp Image 2025-09-11 at 17.08.33_c949b35b.jpg",
                            IsDeleted = false,
                            Name = "Pizza",
                            Price = 80m,
                            Stock = 100
                        });
                });

            modelBuilder.Entity("E_commerce.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@test.com",
                            Name = "Admin",
                            Password = "123456",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "mohamed@test.com",
                            Name = "Mohamed",
                            Password = "123456",
                            Role = "Customer"
                        },
                        new
                        {
                            Id = 3,
                            Email = "sara@test.com",
                            Name = "Sara",
                            Password = "123456",
                            Role = "Customer"
                        },
                        new
                        {
                            Id = 4,
                            Email = "ali@test.com",
                            Name = "Ali",
                            Password = "123456",
                            Role = "Customer"
                        },
                        new
                        {
                            Id = 5,
                            Email = "omar@test.com",
                            Name = "Omar",
                            Password = "123456",
                            Role = "Customer"
                        },
                        new
                        {
                            Id = 6,
                            Email = "nour@test.com",
                            Name = "Nour",
                            Password = "123456",
                            Role = "Customer"
                        },
                        new
                        {
                            Id = 7,
                            Email = "khaled@test.com",
                            Name = "Khaled",
                            Password = "123456",
                            Role = "Customer"
                        },
                        new
                        {
                            Id = 8,
                            Email = "huda@test.com",
                            Name = "Huda",
                            Password = "123456",
                            Role = "Customer"
                        },
                        new
                        {
                            Id = 9,
                            Email = "mona@test.com",
                            Name = "Mona",
                            Password = "123456",
                            Role = "Customer"
                        },
                        new
                        {
                            Id = 10,
                            Email = "tamer@test.com",
                            Name = "Tamer",
                            Password = "123456",
                            Role = "Customer"
                        });
                });

            modelBuilder.Entity("E_commerce.Models.Cart", b =>
                {
                    b.HasOne("E_commerce.Models.User", "User")
                        .WithOne("Carts")
                        .HasForeignKey("E_commerce.Models.Cart", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_commerce.Models.CartItem", b =>
                {
                    b.HasOne("E_commerce.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_commerce.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_commerce.Models.Order", b =>
                {
                    b.HasOne("E_commerce.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_commerce.Models.OrderItem", b =>
                {
                    b.HasOne("E_commerce.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_commerce.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_commerce.Models.Product", b =>
                {
                    b.HasOne("E_commerce.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("E_commerce.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("E_commerce.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_commerce.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("E_commerce.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("E_commerce.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
